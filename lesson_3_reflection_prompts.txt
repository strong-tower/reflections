When would you want to use a remote repository rather than keeping all your work
local?

    Most likely every time. This will act as a backup of sorts for my local
    repository.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    It's better I decide when to pull changes manually from my remote repository as
    opposed to having git do this automatically for me as I may not want to pull in
    changes or even be aware of such changes by a collaborator to the remote repository,
    in order not to disrupt my workflow locally.
    It's better I explicitly sync in new changes to my local repository when I'm ready
    for it.

Describe the differences between forks, clones, and branches. When would you use one
instead of another?

    Forks; a github concept, are used to clone a copy of an existing repository on
    github that you want to be able to modify but do not have permission to modify.
    Fork clone's the original repository
    which existed on github in some other user's account to your own account on github.
    You can then either modify the forked version there on github or clone it to a local
    computer and it's automatically set up as a remote for the local clone.
    Clones however is a git concept and can copy a repository to your local computer
    from any remote.
    Branches are a git concept and are used to create a version of a given repository from
    an original, having it's own history of commits and a tip representing the latest
    commit in the branch. A branch will always have a common commit with the branch that
    was active in the repository when the new branch was created.

What is the benefit of having a copy of the last known state of the remote stored locally?

    This helps to see firstly how a local repository differ in the number of new commits
    from its remote, thereby serving as reminder to the author of the need to push changes
    and keep the local repo in sync with the remote repo.
    It secondly serves as a pivot point to receive git fetches from the remote repository
    to sync the remote copy with the local copy
    which can then be used to compare with the local repository to see if there may be
    divergence between the local and remote repositories, running git status.
    which should then be merged (resolved if any merge conflicts arise)

How would you collaborate without using Git or GitHub? What would be easier, and what
would be harder?

    To collaborate without git or github would make the process very tedious and
    error-prone. Keeping branches and commit history would be near impossible.
    Sending pull requests could be handled via email but would be very fragile.

When would you want to make changes in a separate branch rather than directly in master?
What benefits does each approach have?

    I would want to make changes in a separate branch rather than directly in master
    when I'm collaborating on a project with other developers and want to get feedback
    on a new feature I'm adding or when I'm experimenting or exploring a new path
    through my codebase and don't want to yet merge those changes into the master branch.
    This gives the benefit of not being afraid to make breaking changes and also get
    input from others.
